{"version":3,"sources":["LetSuspense.js","fakeData.js","App.js","serviceWorker.js","index.js"],"names":["LetSuspense","condition","Placeholder","placeholder","multiplier","initialDelay","checkOnce","children","useState","component","setComponent","isChecked","setIsChecked","useEffect","delayedTimeout","setTimeout","tempComponent","mx","i","push","key","clearTimeout","map","index","fakeData","id","title","img","desc","fakeApi","query","Promise","resolve","reject","data","trim","filter","d","toLowerCase","includes","SearchBar","props","className","type","value","onChange","e","handleSearch","target","DataCard","src","alt","style","width","height","margin","App","movies","setMovies","setQuery","a","result","fetchData","textAlign","color","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc99070f.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\n\r\nexport default function LetSuspense({\r\n    condition,\r\n    placeholder: Placeholder,\r\n    multiplier,\r\n    initialDelay,\r\n    checkOnce,\r\n    children,\r\n}) {\r\n    const [component, setComponent] = useState([]);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (checkOnce && isChecked) {\r\n            setComponent([children]);\r\n            return;\r\n        }\r\n\r\n        let delay = initialDelay || 0;\r\n        let delayedTimeout = null;\r\n        if (condition) {\r\n            if (initialDelay) {\r\n                delayedTimeout = setTimeout(() => {\r\n                    setComponent([children]);\r\n                }, delay);\r\n            } else {\r\n                setComponent([children]);\r\n            }\r\n            setIsChecked(true);\r\n        } else {\r\n            let tempComponent = [];\r\n            let mx = multiplier || 1\r\n            for (let i = 0; i < mx; i++) {\r\n                tempComponent.push(<Placeholder key={i} />);\r\n            }\r\n            setComponent(tempComponent);\r\n        }\r\n        return () => {\r\n            if (delayedTimeout) {\r\n                clearTimeout(delayedTimeout);\r\n            }\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [condition, children]);\r\n    return (\r\n        <Fragment>\r\n            {component.map((component, index) => (\r\n                <Fragment key={index}>{component} </Fragment>\r\n            ))}\r\n        </Fragment>\r\n    );\r\n}\r\n","export const fakeData = [\r\n    {\r\n        id: 1,\r\n        title: \"Spider-Man: Far from Home\",\r\n        img: \"https://image.tmdb.org/t/p/w600_and_h900_bestv2/4q2NNj4S5dG2RLF9CpXsej7yXl.jpg\",\r\n        desc: \"Peter Parker and his friends go on a summer trip to Europe. However, they will hardly be able to rest - Peter will have to agree to help Nick Fury.\"\r\n    },\r\n    {\r\n        id: 2,\r\n        title: \"Black Panther\",\r\n        img: \"https://image.tmdb.org/t/p/w600_and_h900_bestv2/uxzzxijgPIY7slzFvMotPv8wjKA.jpg\",\r\n        desc: \"King T'Challa returns home from America to the reclusive, technologically advanced African nation of Wakanda to serve as his country's new leader.\"\r\n    },\r\n    {\r\n        id: 3,\r\n        title: \"Ant-Man and the Wasp\",\r\n        img: \"https://image.tmdb.org/t/p/w600_and_h900_bestv2/eivQmS3wqzqnQWILHLc4FsEfcXP.jpg\",\r\n        desc: \"Just when his time under house arrest is about to end, Scott Lang once again puts his freedom at risk to help Hope van Dyne and Dr. Hank Pym.\"\r\n    },\r\n    {\r\n        id: 4,\r\n        title: \"Avengers: Infinity War\",\r\n        img: \"https://image.tmdb.org/t/p/w600_and_h900_bestv2/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\",\r\n        desc: \"As the Avengers and their allies have continued to protect the world from threats too large for any one hero to handle, a new danger has emerged from the cosmic shadows: Thanos.\"\r\n    }\r\n]","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport LetSuspense from \"./LetSuspense\";\n\nimport { fakeData } from \"./fakeData\";\n\n// mock api calls simulates a delayed api call for each query\nconst fakeApi = (query) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      let data = fakeData;\n      if (query.trim() === \"\") return resolve(data);\n      data = data.filter((d) =>\n        d.title.toLowerCase().includes(query.toLowerCase())\n      );\n      return resolve(data);\n    }, 1500);\n  });\n};\n// search bar component queries the available data by title\nconst SearchBar = (props) => {\n  return (\n    <form className=\"search-form\">\n      <input\n        type=\"search\"\n        placeholder=\"Search titles\"\n        value={props.query}\n        onChange={(e) => props.handleSearch(e.target.value)}\n      />\n    </form>\n  );\n};\n// data card component displays the data from the api\nconst DataCard = (props) => {\n  return (\n    <div className=\"data-card\">\n      <figure className=\"img-container\">\n        <img src={props.img} alt={props.title} />\n      </figure>\n      <h2>{props.title}</h2>\n      <p>{props.desc}</p>\n    </div>\n  );\n};\n// placeholder component shows a skeleton UI that resembles the DataCard\nconst Placeholder = (props) => {\n  return (\n    <div className=\"data-card\">\n      <figure className=\"img-container loading\"> </figure>\n      <p className=\"loading\" style={{ width: \"60%\", height: 30 }}></p>\n      <p\n        className=\"loading\"\n        style={{ width: \"100%\", height: 12, margin: \"8px 0\" }}\n      ></p>\n      <p\n        className=\"loading\"\n        style={{ width: \"80%\", height: 12, margin: \"8px 0\" }}\n      ></p>\n      <p\n        className=\"loading\"\n        style={{ width: \"100%\", height: 12, margin: \"8px 0\" }}\n      ></p>\n    </div>\n  );\n};\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(\"\");\n\n  const handleSearch = (query) => {\n    setMovies([]);\n    setQuery(query);\n  };\n  const fetchData = async () => {\n    const result = await fakeApi(query);\n    setMovies(result);\n  };\n\n  fetchData();\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h2 style={{ textAlign: \"center\", color: \"#fff\" }}>Vuetube</h2>\n        <SearchBar query={query} handleSearch={handleSearch} />\n        <div className=\"card-container\">\n          <LetSuspense\n            condition={movies.length > 0}\n            placeholder={Placeholder}\n            multiplier={3}\n            initialDelay={200}\n          >\n            {movies.map(({ id, title, img, desc }) => (\n              <DataCard key={id} title={title} img={img} desc={desc} /> //render card\n            ))}\n          </LetSuspense>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}